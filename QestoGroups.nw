% File:  QestoGroups.nw
% Author: mikolas
% Created on: Tue, Dec 09, 2014 7:43:19 PM
% Copyright (C) 2014, Mikolas Janota
<<public members>>=
QestoGroups(const Options& opt,
            const LevelInfo& levs,
            Groups& groups);
bool solve();
lbool solve(size_t confl_budget);

<<QestoGroups.hh>>=
#ifndef QESTOGROUPS_NW_29063
#define QESTOGROUPS_NW_29063
<<h includes>>
class QestoGroups {
 public: <<public members>>
 private: <<private members>>
 private: <<private methods>>
};
<<inline implementation>>
#endif

<<QestoGroups.cc>>=
<<c includes>>
<<implementation>>

@ \section{Initialization}
<<implementation>>=
QestoGroups::QestoGroups(const Options& opt,
                         const LevelInfo& levs,
                         Groups& groups)
<<fields init>>
{
  assert(levs.lev_count());
  assert(levs.level_type(levs.lev_count()-1)==EXISTENTIAL);
  init();
  if(verb>5){
    for(size_t ul=0;ul<levs.lev_count();++ul){
      const auto& gs=groups.groups(ul);
      size_t c=0;
      FOR_EACH(gi,gs) if(groups.lits(*gi).empty())++c;
      std::cerr<<"gs@l"<<ul<<":"<<gs.size()<<" e:"<<c<<std::endl;
    }
  }
}

<<private members>>=
const Options& opt;
const size_t verb;
const LevelInfo& levs;
size_t tot_bt_count;
Groups& groups;
<<fields init>>=
: opt(opt)
, verb(opt.get_verbose())
, levs(levs)
, tot_bt_count(0)
, groups(groups)

@ We introduce variables $s_k^G$ which indicate that the group $G$ is
\emph{selected} at the quantification level $k$. If the variable is false,
then we say that the group is \emph{deselected}.
<<private methods>>=
inline Var s(size_t quant_level,size_t group_index) const;


@ For each  quantification level, we create a SAT solver, which stores the
abstraction for that level. To obtain a more uniform implementation, there is
an \emph{additional level} representing the universal player.
<<private members>>=
SATSPC::MiniSatExt* abstractions;
<<fields init>>=
, abstractions(new SATSPC::MiniSatExt[levs.lev_count()+1])

@  TODO
<<private methods>>=
inline Var p(size_t quant_level,size_t group_index) const;

@ Before solving, the abstractions must be initialized with requirements on
the~$s$ variables.
<<implementation>>=
void QestoGroups::init(){
  GroupInversion* gin= (opt.get_varelim()||opt.get_resdep()) ?
                           new GroupInversion(groups)
                         : NULL;
  allocate_selectors();
  init_game_rules();
  init_svars(gin);
  if(opt.get_ex_inst()){inst_e();}
  if(opt.get_resdep()) {// encode resolution dependencies
     std::cerr<<"c resdep init start:"<<read_cpu_time()<<std::endl;
     encode_resdep(*gin);
     std::cerr<<"c resdep init end:"<<read_cpu_time()<<std::endl;
     std::cerr<<"c rescount:"<<rescount<<std::endl;
  }
}

@ The invariant for variables $s_k^G$ is that an abstraction at level $m$ can
only refer to variables $s_k^G$ with $k\leq m$.  We  encode into the
abstractions that $s_k^G$ is true iff $s_{k-1}^G$ is true and all the literals
at level $k$ in the group $G$ are falsified.

<<implementation>>=
void QestoGroups::init_svars(const GroupInversion* gin) {
  vector<Lit> saux;
  for(size_t qlev=0;qlev<levs.lev_count();++qlev){
    if(opt.get_varelim()&&level_type(qlev)==UNIVERSAL) {
      assert(gin);
      encode_variable_elimination(qlev,*gin);
      continue;
    }
    const auto& gs=groups.groups(qlev);
    FOR_EACH(gi,gs) {
      const size_t g=*gi;
      saux.clear();
      if(qlev) saux.push_back(mkLit(p(qlev,groups.parent(g))));
      const auto& ls=groups.lits(g);
      FOR_EACH(li,ls) saux.push_back(~(*li));
      const auto sel_lit=mkLit(s(qlev,g));
      if(opt.get_dir1_enc()) {
        if(level_type(qlev)==EXISTENTIAL) {
          //encode_and(abstractions[qlev],sel_lit,saux);
          encode_and_neg(abstractions[qlev],sel_lit,saux);
        } else {
          encode_and_pos(abstractions[qlev],sel_lit,saux);
        }
      } else {
        encode_and(abstractions[qlev],sel_lit,saux);
      }
    }
  }
}

@ For any pair of clauses $g_1$ and $g_2$ such that $x\in g_1$ and $\bar x\in
  g_2$, introduce the constraint $\bar s_1\lor\bar s_2$ where $s_i$ is a
  selection variable for $g_i$.
<<implementation>>=
void QestoGroups::encode_variable_elimination(
    size_t qlev, const GroupInversion& gin) {
  std::unordered_set<std::pair<size_t, size_t> > conflicts;
  const auto& vars=levs.level_vars(qlev);
  FOR_EACH(vi,vars) {
    const Var v=*vi;
    const auto& gs1=gin[mkLit(v)];
    const auto& gs2=gin[~mkLit(v)];
    FOR_EACH(cii1,gs1) {
      FOR_EACH(cii2,gs2) {
        const auto group1=min(*cii1,*cii2);
        const auto group2=max(*cii1,*cii2);
        conflicts.insert(make_pair(group1,group2));
      }
    }
  }
  std::cerr<<"c conflicts: "<<conflicts.size()<<std::endl;
  if(qlev){
    vector<size_t> gs=groups.groups(qlev);
    FOR_EACH(i,gs) {
      const auto g=*i;
      const auto par=groups.parent(g);
      assert(g!=par);
      abstractions[qlev].addClause(~mkLit(s(qlev,g)),
                                    mkLit(p(qlev,par)));
    }
  }
  FOR_EACH(i,conflicts) {
    abstractions[qlev].addClause(~mkLit(s(qlev,i->first)),
                                 ~mkLit(s(qlev,i->second)));
  }
}

<<implementation>>=
void QestoGroups::init_game_rules(){
  init_game_rules_univ();
  init_game_rules_exists();
}

@ At all universal levels, the universal player must select at least one group
(otherwise it immediately loses).
<<implementation>>=
void QestoGroups::init_game_rules_univ() {
  vec<Lit> aux;
  const auto sz=levs.lev_count();
  for(size_t qlev=0;qlev<sz;++qlev){
    if(level_type(qlev)==EXISTENTIAL) continue;
    vector<size_t> gs=groups.groups(qlev);
    aux.clear();
    FOR_EACH(gi,gs) aux.push(mkLit(s(qlev,*gi)));
    abstractions[qlev].addClause_(aux);
  }
  //dummy level
  vector<size_t> gs=groups.groups(sz-1);
  aux.clear();
  FOR_EACH(gi,gs) aux.push(mkLit(p(sz,*gi)));
  abstractions[sz].addClause_(aux);
}

@ At all existential levels~$k$, the existential player must \emph{deselect}
all groups whose highest existential literal is at level$\leq k$.
<<implementation>>=
void QestoGroups::init_game_rules_exists(){
  FOR_EACH(g,groups.groups(0))
    init_game_rules_exists(*g);
}

<<implementation>>=
bool QestoGroups::init_game_rules_exists(size_t group){
  const auto& children = groups.get_children(group);
  bool all_universal = true;
  FOR_EACH(gi, children)
    all_universal&=init_game_rules_exists(*gi);
  const auto qlev=groups.qlev(group);
  const auto qt=level_type(qlev);
  if(all_universal&&qt==EXISTENTIAL)
    abstractions[qlev].addClause(~mkLit(s(qlev,group)));
  all_universal&=(qt==UNIVERSAL)||groups.lits(group).empty();
  return all_universal;
}

@ \section{Solving}

The solver assigns values to variables, starting from the outermost block of
the prefix. For each block it uses the corresponding abstraction to obtain
the values.  If an abstraction becomes unsatisfiable, the solver
\emph{backtracks}. Note that at some point at least one abstraction must
become unsatisfiable due to the dummy additional universal level at the end of
the prefix. The backtracking is not necessarily by 2 quantification levels
since we analyze the source of unsatisfiablity (in concept similar to
conflict analysis).

<<implementation>>=
lbool QestoGroups::solve(size_t confl_budget) {
  size_t qlev=0;
  vec<Lit> conflict_clause;
  vec<Lit> decisions;
  vector<bool> svals(groups.get_group_count(),true);
  while (!opt.get_luby_rest()||confl_budget--) {
    assert(qlev<=levs.lev_count());
    <<make decisions>>
    if(opt.get_bump()&&qlev<levs.lev_count()){
      auto& gs=groups.groups(qlev);
      FOR_EACH(gi,gs) abstractions[qlev].bump(s(qlev,*gi));
    }
    const bool sat=abstractions[qlev].solve(decisions);
    if(sat) {
      <<increase level>>
    } else {//attempt conflict resolution
      <<conflict analysis>>
    }
  }
  if(verb>1)std::cerr<<"restart "<<tot_bt_count<<std::endl;
  return l_Undef;
}

<<make decisions>>=
decisions.clear();
if(qlev) {
  FOR_EACH(gi,groups.groups(qlev-1)) {
    const auto group=*gi;
    decisions.push(svals[group] ?
          mkLit(p(qlev,*gi)) : ~mkLit(p(qlev,*gi)));
  }
}

@ Based on the solution computed at the quantification level [[qlev]],
move onto the next level.
<<increase level>>=
if(verb>5)print_model(std::cerr<<"m: ",abstractions[qlev].model)<<std::endl;
assert(qlev<levs.lev_count());
decisions.clear();
FOR_EACH(gi,groups.groups(qlev)) {
  const auto group=*gi;
  if(opt.get_smax()) smax(qlev,group,svals);
  else svals[group]=l_True==eval(mkLit(s(qlev,group)),abstractions[qlev].model);
}
++qlev;

@ Analyze conflict and if it is resolvable, backtrack.
<<conflict analysis>>=
++tot_bt_count;
conflict_clause.clear();
size_t bt_qlev=-1;
const bool resolved=analyze(qlev,svals,/*out*/bt_qlev,/*out*/conflict_clause);
if(!resolved) { //formula true iff universal lost
  return level_type(qlev)==UNIVERSAL?l_True:l_False;
} else {
  assert(qlev>bt_qlev);
  if(verb>3)std::cerr<<"cc:"<<conflict_clause<<std::endl;
  if(verb>2)std::cerr<<"cc sz:"<<conflict_clause.size()<<std::endl;
  abstractions[bt_qlev].addClause_(conflict_clause);
  qlev=bt_qlev;
}

<<implementation>>=
bool QestoGroups::solve() {
  int curr_restarts = 0;
  lbool status=l_Undef;
  const double restart_inc=1.5;
  const int restart_first=100;
  while(status==l_Undef){
    const double rest_base = luby(restart_inc, curr_restarts);
    status = solve(rest_base * restart_first);
    curr_restarts++;
  }
  assert(status!=l_Undef);
  return status==l_True;
}

@ During the  conflict analysis we will also need a mapping from $p^k_C$
variables to the information about them.
<<private members>>=
struct PInfo {
  size_t qlev;
  size_t group;
};

<<private methods>>=
inline PInfo get_pinfo(size_t qlev,Var p) const;

@ As the analysis is quite  different for the two players, we separate it
into two respective procedures.
<<implementation>>=
bool QestoGroups::analyze(size_t qlev,const vector<bool>& svals,
                    size_t& bt_qlev,vec<Lit>& conflict_clause) {
  QuantifierType loser=level_type(qlev);
  if(verb>2)std::cerr<<"("<<tot_bt_count<<") analyse loser:"<<loser<<"@"<<qlev<<std::endl;
  return loser==EXISTENTIAL ? analyze_exists(qlev,bt_qlev,conflict_clause)
                            : analyze_univ(qlev,svals,bt_qlev,conflict_clause);
}

@ We start with a unsatisfiable core from the abstraction at the conflict
level [[qlev]]. We need to make sure that at least one of the groups that
appear in the core are already deselected when we get to [[qlev]] next
time.  At this point we're just backtracking by 2 levels.
<<implementation>>=
bool QestoGroups::analyze_exists(size_t qlev,
                          size_t& bt_qlev,vec<Lit>& conflict_clause) {
  assert(level_type(qlev)==EXISTENTIAL);
  if(qlev<2) return false;
  const auto& abstraction_conflict=abstractions[qlev].conflict;
  bool all_opponent=true;
  bt_qlev=-1;
  for(int i=0;i<abstraction_conflict.size();++i) {
    const Lit l=abstraction_conflict[i];
    if((bt_qlev+2)>=qlev) break;
    if(!sign(l)) continue;
    auto pg=get_pinfo(qlev,var(l)).group;
    while(1){
      const auto ppg=groups.parent(pg);
      if(ppg==pg)break;
      pg=ppg;
      const auto pql=groups.qlev(pg);
      const auto pqt=level_type(pql);
      if(pqt==UNIVERSAL) continue;
      if(groups.lits(pg).size()) {
        if(all_opponent||pql>bt_qlev)bt_qlev=pql;
        all_opponent=false;
        break;
      }
    }
  }
  if(all_opponent) return false;
  assert(bt_qlev<=(qlev-2));
  if(verb>2&&(qlev-2)>bt_qlev)std::cerr<<"long jump"<<std::endl;
  if(verb>2)std::cerr<<"bt_qlev:"<<bt_qlev<<std::endl;
  for(int i=0;i<abstraction_conflict.size();++i) {
    const Lit l=abstraction_conflict[i];
    if(!sign(l)) continue;
    const auto vi=get_pinfo(qlev,var(l));
    conflict_clause.push(~mkLit(s(bt_qlev,find_parent(bt_qlev,vi.group))));
  }
  return true;
}

@ To analyze the conflict for the universal player, we need to look at the
groups that are deselected at the moment, and are causing the universal
player to lose. If a group is satisfied by the existential player, the
universal player cannot do anything about it. So we define the backtracking
level for the universal player as the maximum quantification level of literals
that satisfy a group with no true existential literals.
Any groups that are satisfied by an existential literal after the
backtracking level can be removed from the conflict since the player can
always replicate these moves.
<<private members>>=
vector<int> ex_maxlev;// maximum lev of satisfying ex lit
<<implementation>>=
bool QestoGroups::analyze_univ(size_t qlev,const vector<bool>& svals,
                    size_t& bt_qlev,vec<Lit>& conflict_clause) {
  assert(level_type(qlev)==UNIVERSAL);
  if(qlev<2) return false;
  const auto& abstraction_conflict=abstractions[qlev].conflict;
  if(verb>3)std::cerr<<"abstraction_conflict:"<<abstraction_conflict<<std::endl;
  bt_qlev=level_type(0)==UNIVERSAL ? 0 : 1;
  const auto sz=abstraction_conflict.size();
  ex_maxlev.assign(sz,-1);
  bool all_opponent=true;
  for(int i=0;i<sz;++i) {//analyze each group in the core
    const Lit conflict_lit=abstraction_conflict[i];
    if(sign(conflict_lit)) continue;
    <<update max levels>>
  }
  if(all_opponent) return false;
  if(verb>2)std::cerr<<"bt_qlev:"<<bt_qlev<<std::endl;
  for(int i=0;i<sz;++i) {
    const Lit l=abstraction_conflict[i];
    if(sign(l)) continue;
    const auto vi=get_pinfo(qlev,var(l));
    if(ex_maxlev[i]<=(int)bt_qlev)
      conflict_clause.push(mkLit(s(bt_qlev,find_parent(bt_qlev,vi.group))));
  }
  return true;
}

@ For the current group we compute what the highest qualification level of a
satisfied existential literal \emph{before} the conflict quantification level.
We store this value into [[ex_maxlev[i]]] (it stays [[-1]] if no ex.\ lit
satisfies the clause).  Concurrently we compute the highest quantification
level of a universal literal (and store it into [[uni_satlev]]).  If a clause
is satisfied only by universal literals and lits after the conflict lev, the
maximal quantification level of the satisifying universal is used to update
the backtracking level (because only such clauses can be enforced by the
universal player).
<<update max levels>>=
size_t esat_ql,usat_ql;
const auto group=get_pinfo(qlev,var(conflict_lit)).group;
if(find_last_sat_elit(group,esat_ql)) {
  const auto q=(int)esat_ql;
  if(q>ex_maxlev[i]) ex_maxlev[i]=q;
} else {
  all_opponent=false;
  if(find_first_udesel(group,svals,usat_ql)) {
    if(usat_ql>bt_qlev) bt_qlev=usat_ql;
  }
}

@ \section{Additional Encoding}

@ For each sequence of groups that represents a clause, set all universal
variables to false, and TODO.
<<implementation>>=
void QestoGroups::inst_e(){
  FOR_EACH(g,groups.groups(0)) inst_e(*g);
}

<<implementation>>=
void QestoGroups::inst_e(size_t group) {
  if(groups.is_end(group)) {
    vec<Lit> cl;
    bool last=true;
    for(auto qlev=groups.qlev(group)+1;
        qlev--;
        group=groups.parent(group))
    {
      if(level_type(qlev)!=EXISTENTIAL) continue;
      if(!last){
        cl.push(~mkLit(s(qlev,group)));
        abstractions[qlev].addClause(cl);
        cl.pop();
      } else {
        last=false; }
      const auto& ls=groups.lits(group);
      FOR_EACH(li,ls) cl.push(*li);
    }
  } else {
    bool cut=false;
    if(group_type(group)==UNIVERSAL) {
      const auto& literals=groups.lits(group);
      FOR_EACH(li,literals) {
        if(!sign(*li)) continue;
        cut=true;
        break;
      }
    }
    if(!cut){
      const auto& children = groups.get_children(group);
      FOR_EACH(ci,children) inst_e(*ci);
    }
  }
}

<<private members>>=
size_t rescount;
<<fields init>>=
,rescount(0)

@ For each universal group we encode that if the group is selected,
another group from the same level must be selected so that
at least one clause in that group is resolvable. And by resolvable we mean
that there exists another clause with a complementary literal.
<<implementation>>=
void QestoGroups::encode_resdep(const GroupInversion& gin){
#if DEBUG
  for(size_t ul=0;ul<=levs.lev_count();++ul){
    abstractions[ul].new_variables((ul+1)*100-1);
  }
#endif
  const auto& gs=groups.groups(0);
  vector<Lit> branch_cond;
  LitBitSet current_literals;
  vector<bool> skip_lev(levs.lev_count()+1,false);
  FOR_EACH (group_index, gs) {
    encode_resdep(gin,branch_cond,current_literals,skip_lev,*group_index);
  }
}

@ Recurse until the end of clause and generate conditions for its resolvibility.
<<implementation>>=
void QestoGroups::encode_resdep(
  const GroupInversion& gin,
  const vector<Lit>& branch_cond,
  LitBitSet& current_literals,
  vector<bool>& skip_lev,
  size_t group) {
  if(verb>5)std::cerr<<"encode_resdep:"<<group<<std::endl;
  if(groups.is_end(group)) return;
  const auto& literals = groups.lits(group);
  const auto qlev = groups.qlev(group);
  FOR_EACH(li,literals) current_literals.add(*li);
  if(group_type(group)==EXISTENTIAL) {
    <<resdep existential group>>
  }
  <<resdep recursion>>
  FOR_EACH(li,literals) {
    const bool rml=current_literals.remove(*li);
    if(!rml)assert(0);
  }
}

@  For each literal, compute the set of groups, at the same quantification
level is literal, that enable the literal to be resolved. For each  universal
quantification level [[ul]] upstream of the current group, generate the
condition that if of this branch is selected then also one of these groups
have to be selected--- but here he we need to adjust this group to the right
quantification level by computing the parent at [[ul]].
<<resdep existential group>>=
vector<size_t> resolvables;
for(size_t pivot_index=0; pivot_index<literals.size(); ++pivot_index){
  const auto& pivot=literals[pivot_index];
  resolvables.clear();
  compute_resolvables(gin,
                      current_literals,
                      qlev,pivot,
                      resolvables);
  vec<Lit> aux;
  for(size_t ul=0;ul<qlev;++ul){
    if(level_type(ul)!=UNIVERSAL||skip_lev[ul]) continue;
    //if(level_type(ul)!=UNIVERSAL) continue;
    assert(branch_cond.size()>ul);
    aux.clear();
    aux.push(~(branch_cond[ul]));
    FOR_EACH(ri,resolvables) {
      const auto p=find_parent(ul,*ri);
      assert(p!=*ri);
      aux.push(mkLit(s(ul,p)));
    }
    if(verb>5)std::cerr<<"ebrc@"<<ul<<":"<<aux<<std::endl;
    abstractions[ul].addClause_(aux);
    ++rescount;
  }
}

@ For each child and upstream level generating new branching variable,
given the parent benching condition, require that at least on one of the
current ones we branch.
<<resdep recursion>>=
const auto& children=groups.get_children(group);
if(children.size()){
  vector<vec<Lit>* > branching(qlev+1);
  for(size_t i=0;i<branching.size();++i) branching[i]=new vec<Lit>();
  //std::cerr<<"brcond:"<<branch_cond<<std::endl;
  for(size_t ul=0;ul<=qlev;++ul){
    if(level_type(ul)!=UNIVERSAL) continue;
    assert(branch_cond.size()>=ul);
    if(ul==qlev) branching[qlev]->push(~mkLit(s(qlev,group)));
    else branching[ul]->push(~branch_cond[ul]);
  }
  vector<Lit> branch_cond_new(qlev+1);
  const auto csz=children.size();
  if(csz==1
    &&(qlev+2)<levs.lev_count()
    &&level_type(qlev)==UNIVERSAL
    &&groups.lits(children[0]).empty()) 
    skip_lev[qlev+2]=true;
  for(size_t child_index=0;child_index<csz;++child_index){
    if(verb>5)std::cerr<<"child gr:"<<children[child_index]<<std::endl;

    for(size_t ul=0;ul<=qlev;++ul){
      if(level_type(ul)!=UNIVERSAL||skip_lev[ul]) continue;
      //if(level_type(ul)!=UNIVERSAL) continue;
      const auto br=ul<qlev&&csz==1 ? branch_cond[ul]
                                    : mkLit(abstractions[ul].newVar());
      if(verb>5)std::cerr<<"brlit@"<<ul<<":"<<br<<std::endl;
      branching[ul]->push(br);
      branch_cond_new[ul]=br;
    }
    encode_resdep(gin,branch_cond_new,current_literals,skip_lev,children[child_index]);
  }
  for(size_t ul=0;ul<=qlev;++ul){
    if(level_type(ul)!=UNIVERSAL||skip_lev[ul]) continue;
    //if(level_type(ul)!=UNIVERSAL) continue;
    if(verb>5)std::cerr<<"abrc@"<<ul<<":"<<*(branching[ul])<<std::endl;
    abstractions[ul].addClause_(*(branching[ul]));
    ++rescount;
    delete branching[ul];
  }
  if((qlev+2)<levs.lev_count()) skip_lev[qlev+2]=false;
}

<<implementation>>=
void QestoGroups::compute_resolvables(const GroupInversion& gin,
                                      const LitBitSet& current_literals,
                                      size_t qlev,
                                      Lit pivot,
                                      /*out*/vector<size_t>& resolvables){
  if(verb>5)std::cerr<<"compute_resolvables: "<<pivot<<std::endl;
  const auto& gs=gin[~pivot];
  FOR_EACH (other_index,gs) {
    const auto &other_group =*other_index;
    bool pivot_found=false;
    size_t distance=0;
    const auto& other_lits=groups.lits(other_group);
    if(verb>5)std::cerr<<"testing: "<<other_group<<":["<<other_lits<<"]"<<std::endl;
    FOR_EACH(oli,other_lits) {
      const Lit other_literal=*oli;
      if(other_literal==~pivot) pivot_found=true;
      if(current_literals.get(~other_literal)) ++distance;
      if(distance>1) break;
    }
    if((distance<=1)&&!pivot_found)assert(0);
    if(distance!=1)continue;
    //verify  distance for upstream literals
    size_t other_ancestor = other_group;
    while(1) {
      const auto oa=groups.parent(other_ancestor);
      if (other_ancestor==oa) break;
      other_ancestor=oa;
      distance+=calc_distance(current_literals,groups.lits(other_ancestor));
      if(verb>6)std::cerr<<"dist: "<<other_ancestor<<':'<<distance<<std::endl;
      if(distance>1) break;
    }
    if(distance!=1) continue;
    if(verb>5)std::cerr<<"resolvable: "<<pivot<<'&'<<other_group<<std::endl;
    resolvables.push_back(other_group);
  }
}

@ \section{Auxiliary Functions}

<<implementation>>=
size_t QestoGroups::find_parent(size_t qlev,size_t group) {
   assert(groups.qlev(group)>=qlev);
   while(1){
     const auto gql=groups.qlev(group);
     if(gql==qlev) return group;
     group=groups.parent(group);
   }
}

<<implementation>>=
bool QestoGroups::find_first_udesel(size_t group,
                                  const vector<bool>& svals,
                                  size_t& ql) {
  bool rv=false;
  while(1){
    const auto _ql=groups.qlev(group);
    if(level_type(_ql)==UNIVERSAL&&!svals[group]) {
      ql=_ql;
      rv=true;
    }
    const auto parent=groups.parent(group);
    if(group==parent) return rv;
    group=parent;
  }
  assert(0);
  return rv;
}

<<implementation>>=
bool QestoGroups::find_last_sat_elit(size_t group,size_t& ql){
  while(1){
    ql=groups.qlev(group);
    if(level_type(ql)==EXISTENTIAL) {
      FOR_EACH(li,groups.lits(group)) {
        if(eval(*li,abstractions[ql].model)==l_True)
          return true;
      }
    }
    const auto parent=groups.parent(group);
    if(group==parent) return false;
    group=parent;
  }
  assert(0);
  return false;
}

<<private members>>=
vector<Var> svars;
vector<Var> pvars;
vector<vector<PInfo> > infos;

<<fields init>>=
,infos(levs.lev_count()+1)

<<implementation>>=
void QestoGroups::allocate_selectors() {
  const Var orig_maxv=levs.maxv();
  assert(levs.lev_count());
  for(size_t qlev=0;true;++qlev){
    assert(qlev<=levs.lev_count());
    const bool ve=opt.get_varelim()&&level_type(qlev)==UNIVERSAL;
    if(opt.get_dir1_enc() || ve)
      abstractions[qlev].phase_saving=0;
    if(!ve) abstractions[qlev].new_variables(orig_maxv);
    if(qlev) {//parent selectors
      const auto& pgs=groups.groups(qlev-1);
      FOR_EACH(gi,pgs) {
        const auto group=*gi;
        const Var pv=abstractions[qlev].newVar(/*assumption*/);
        if (pvars.size()<=group) pvars.resize(group+1,-1);
        pvars[group]=pv;
        if(verb>5)std::cerr<<"m: "<<group<<"@"<<qlev<<":"<<pv<<std::endl;
        const size_t inx=ve ? pv : pv-orig_maxv-1;
        auto& ql_infos=infos[qlev];
        if (ql_infos.size()<=inx) ql_infos.resize(inx+1);
        ql_infos[inx].qlev=qlev-1;
        ql_infos[inx].group=*gi;
      }
    }
    if(qlev>=levs.lev_count()) break;
    const auto& gs=groups.groups(qlev);
    FOR_EACH(gi,gs) {
      const auto group=*gi;
      const Var v=abstractions[qlev].newVar(level_type(qlev)==EXISTENTIAL);
      if (svars.size()<=group) svars.resize(group+1,-1);
      svars[group]=v;
      if(verb>5)std::cerr<<"m: "<<group<<"@"<<qlev<<":"<<v<<std::endl;
    }
  }
}

<<implementation>>=
bool QestoGroups::smax(size_t qlev,size_t group,
                      vector<bool>& svals) {
  const Lit sel_l=mkLit(s(qlev,group));
  const auto& model=abstractions[qlev].model;
  bool rv=eval(sel_l,model)==l_True;
  if(rv==(level_type(qlev)==EXISTENTIAL)) {
    rv=!qlev||svals[groups.parent(group)];//parent val
    const auto& ls=groups.lits(group);
    FOR_EACH(li,ls) {
      if(!rv) break;
      if(eval(*li,model)==l_True) rv=false;
    }
  }
  svals[group]=rv;
  return rv;
}


<<inline implementation>>=
inline Var QestoGroups::p(size_t qlev,size_t group) const{
  assert(qlev);
  assert(qlev<=levs.lev_count());
  assert(groups.qlev(group)==qlev-1);
  assert(group<pvars.size());
  return pvars[group];
}

<<inline implementation>>=
inline Var QestoGroups::s(size_t qlev,size_t group) const{
  assert(qlev<levs.lev_count());
  assert(groups.qlev(group)==qlev);
  assert(group<svars.size());
  return svars[group];
}

<<inline implementation>>=
inline QestoGroups::PInfo QestoGroups::get_pinfo(size_t qlev,Var pv) const {
  const bool ve=opt.get_varelim()&&level_type(qlev)==UNIVERSAL;
  assert(ve || pv>levs.maxv());
  const size_t inx=ve ? pv : pv-levs.maxv()-1;
  auto& ql_infos=infos[qlev];
  assert(inx<ql_infos.size());
  return ql_infos[inx];
}

<<private methods>>=
inline QuantifierType group_type(size_t gid) {
  return level_type(groups.qlev(gid)); }

<<private methods>>=
inline QuantifierType level_type(size_t qlev) const {
  assert(qlev<=levs.lev_count());
  return qlev<levs.lev_count() ? levs.level_type(qlev) : UNIVERSAL;
}

<<public members>>=
inline size_t get_btcount() const {return tot_bt_count;}

<<implementation>>=
size_t QestoGroups::calc_distance(const LitBitSet& current_literals,
                const LitSet& other_literals) {
  size_t return_value = 0;
  FOR_EACH (other_literal_index, other_literals) {
    const auto other_literal =*other_literal_index;
    if (current_literals.get(~other_literal)) ++return_value;
    if (return_value>1) break;
  }
  return return_value;
}

<<c includes>>=
#include <unordered_set>
#include "QestoGroups.hh"
#include "ClausesInversion.hh"
#include "LitBitSet.hh"
using std::max;
using std::min;
using std::make_pair;
using SATSPC::vec;
using SATSPC::Lit;
using SATSPC::lit_Undef;

<<h includes>>=
#include "Options.hh"
#include "Groups.hh"
#include "DataStructures.hh"
#include "LevelInfo.hh"
#include "GroupInversion.hh"
#include <unordered_map>
#include <utility>
#include "MiniSatExt.hh"

<<private methods>>=
void init();
bool analyze(size_t qlev,const vector<bool>& svals,size_t& bt_qlev,vec<Lit>& conflict_clause);
bool analyze_univ(size_t qlev,const vector<bool>& svals,size_t& bt_qlev,vec<Lit>& conflict_clause);
bool analyze_exists(size_t qlev,size_t& bt_qlev,vec<Lit>& conflict_clause);
size_t find_parent(size_t qlev,size_t group);
bool find_sat_lit(size_t group,Lit& l);
void allocate_selectors();
void inst_e();
void inst_e(size_t group);
void encode_resdep(const GroupInversion& gin);
void inst_e(const Groups::Node* n,
    vector<const Groups::Node*>& accum,
    vector<Groups::Edge>& eaccum);
static size_t calc_distance(const LitBitSet& current_literals,
    const LitSet& other_literals);
void compute_resolvables(const GroupInversion& gin,
    const LitBitSet& current_literals,
    size_t qlev,
    Lit pivot,
    /*out*/vector<size_t>& resolvables);
void encode_resdep(
    const GroupInversion& gin,
    const vector<Lit>& branch_cond,
    LitBitSet& current_literals,
    vector<bool>& skip_lev,
    size_t group);
bool smax(size_t qlev,size_t group,vector<bool>& svals);
void init_game_rules();
void init_svars(const GroupInversion* gin);
void init_game_rules_exists();
bool init_game_rules_exists(size_t group);
void init_game_rules_univ();
bool find_first_udesel(size_t group,
                                  const vector<bool>& svals,
                                  size_t& ql);
bool find_last_sat_elit(size_t group,size_t& ql);
void encode_variable_elimination(
    size_t qlev, const GroupInversion& gin);
