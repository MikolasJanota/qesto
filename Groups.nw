% File:  Groups.nw
% Author: mikolas
% Created on: Tue, Dec 09, 2014 2:45:37 PM
% Copyright (C) 2014, Mikolas Janota
<<Groups.hh>>=
#ifndef GROUPS_NW_25825
#define GROUPS_NW_25825
<<h includes>>
class Groups{public:<<public members>>
             private:<<private members>>};
#endif

<<public members>>=
Groups(const LevelInfo& levs,const QFla& fla)
<<fields init>>
{
  for(size_t index = 0; index<fla.cnf.size(); ++index)
    add_clause(index);
  gen_groups();
  std::cerr<<"c groups init "<<read_cpu_time()<<std::endl;
  std::cerr<<"c groups count "<<group_count<<std::endl;
}

<<public members>>=
size_t parent(size_t gid) const;
const vector<size_t>& groups(size_t qlev) const;
const LitSet& lits(size_t gid) const;
size_t qlev(size_t gid) const;

<<Groups.cc>>=
#include "Groups.hh"
#include "mtl/Sort.h"
using SATSPC::lit_Error;
<<implementation>>

<<private members>>=
struct Node;

<<private members>>=
struct Edge {
  Edge():l(SATSPC::lit_Error),n(NULL),ql(-1) { }
  Edge(Lit l, Node* n, size_t ql):l(l),n(n),ql(ql) { }
  Lit l; Node* n;
  size_t ql;
};


<<private members>>=
struct Node {
  Node():is_end(false) {}
  bool is_end;
  std::vector<Edge> es;
};

<<private members>>=
const LevelInfo& levs;
const QFla& fla;
Node root;
size_t group_count;
vector<LitSet> gr2lits;
vector<size_t> gr2parent;
vector<size_t> gr2qlev;
vector<vector<size_t> >  grouped_levels;

<<fields init>>=
:levs(levs)
,fla(fla)
,group_count(0)
,grouped_levels(levs.lev_count())

<<implementation>>=
bool Groups::add_clause(size_t clause_index) {
  Node *node = &root;
  vec<Lit> cls;
  FOR_EACH(li,fla.cnf[clause_index]) cls.push(*li);
  LevCmp lc(&levs);
  SATSPC::sort(cls,lc);
  bool is_new=false;
  size_t curr_lev=0;
  int i=0;
  const auto clsz=cls.size();
  while(curr_lev<levs.lev_count()){
    //if(node->is_end){assert(!is_new);return false;}
    Lit l=SATSPC::lit_Undef;
    if((i>=clsz)||((curr_lev+1)<levs.qlev(cls[i]))) {
      l=lit_Error;
      ++curr_lev;
      if(curr_lev==levs.lev_count())
        break;
    }else{
      l=cls[i];
      curr_lev=levs.qlev(l);
      ++i;
    }
    auto& es=node->es;
    const auto sz=es.size();
    size_t j=0;
    while(j<sz&&es[j].l!=l) ++j;
    if(j==sz) {
      is_new=true;
      es.push_back(Edge(l,new Node(),curr_lev));
    }
    assert(es[j].l==l);
    assert(es[j].ql==curr_lev);
    node=es[j].n;
  }
  node->is_end=true;
  //del_subtree(node);//remove subsumed
  return is_new;
}

<<implementation>>=
void Groups::gen_groups(){
  if(fla.cnf.empty())return;
  vector<Lit> accum;
  gen_groups(root,0,-1,accum);
}

<<implementation>>=
void Groups::gen_groups(const Node& n,
                        size_t ql,
                        size_t parent_group,
                        vector<Lit>& accum){
  assert(ql<levs.lev_count());
  bool new_group=n.es.empty();
  FOR_EACH(i,n.es) {
    assert(i->ql==(ql+1)||i->ql==ql);
    if(i->ql!=ql){
      new_group=true;
      break;
    }
  }
  const auto gid=new_group ? add_group(LitSet(accum),ql,parent_group) : -1;
  FOR_EACH(i,n.es) {
    if(i->ql!=ql){
      assert(i->ql==ql+1);
      assert(new_group);
      vector<Lit> new_accum;
      if(i->l!=lit_Error)new_accum.push_back(i->l);
      gen_groups(*(i->n),ql+1,gid,new_accum);
    } else {
      if(i->l!=lit_Error)accum.push_back(i->l);
      gen_groups(*(i->n),ql,parent_group,accum);
      if(i->l!=lit_Error)accum.pop_back();
    }
  }
}

<<implementation>>=
size_t Groups::add_group(LitSet ls, size_t ql, size_t parent_group){
  const size_t gid=group_count++;
  gr2lits.resize(gid+1);
  gr2parent.resize(gid+1);
  gr2qlev.resize(gid+1);
  gr2lits[gid]=ls;
  gr2parent[gid]=ql?parent_group:gid;
  gr2qlev[gid]=ql;
  grouped_levels[ql].push_back(gid);
  std::cerr<<"-----"<<std::endl;
  std::cerr<<"gr: "<<gid<<std::endl;
  std::cerr<<"ls: ["<<gr2lits[gid]<<"]\n";
  std::cerr<<"ql: "<<gr2qlev[gid]<<std::endl;
  std::cerr<<"par: "<<gr2parent[gid]<<std::endl;
  std::cerr<<"-----"<<std::endl;
  return gid;
}

<<implementation>>=
void Groups::del_subtree(Node* n) {
  FOR_EACH(i,n->es) {
    del_subtree(i->n);
    delete i->n;
  }
  n->es.clear();
}

<<implementation>>=
size_t Groups::parent(size_t gid) const{
  assert(gid<group_count);
  return gr2parent[gid];
}

<<implementation>>=
const vector<size_t>& Groups::groups(size_t qlev) const {
  assert(qlev<levs.lev_count());
  return grouped_levels[qlev];
}

<<implementation>>=
const LitSet& Groups::lits(size_t gid) const {
  assert(gid<group_count);
  return gr2lits[gid];
}

<<implementation>>=
size_t Groups::qlev(size_t gid) const {
  assert(gid<group_count);
  return gr2qlev[gid];
}

<<h includes>>=
#include "DataStructures.hh"
#include "LevelInfo.hh"
#include "LitBitSet.hh"
#include <unordered_map>
#include <utility>
#include "MiniSatExt.hh"

<<private members>>=
bool add_clause(size_t clause_index);
void del_subtree(Node* n);
void gen_groups();
void gen_groups(const Node& n, size_t ql, size_t parent_group, vector<Lit>& accum);
size_t add_group(LitSet ls, size_t ql, size_t parent_group);
